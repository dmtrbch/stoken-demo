<div class="withdraw-request-container">
	<h3>View Withdraw Request</h3>
	<p class="withdraw-request-description">
		Enter a withdraw request ID to view its details and status.
	</p>
	<div class="withdraw-request-form">
		<label for="request-id">Request ID:</label>
		<input type="number" id="request-id" placeholder="Enter request ID" min="0" step="1" />
		<button id="fetch-request-button" disabled>Fetch Request Details</button>
	</div>
	<div id="withdraw-request-status" class="status-message"></div>
	
	<!-- Request Details Display -->
	<div id="request-details" class="request-details" style="display: none;">
		<h4>Withdraw Request Details</h4>
		<div class="detail-grid">
			<div class="detail-item">
				<span class="detail-label">Request ID:</span>
				<span id="detail-request-id" class="detail-value">-</span>
			</div>
			<div class="detail-item">
				<span class="detail-label">Shares Requested:</span>
				<span id="detail-shares" class="detail-value">-</span>
			</div>
			<div class="detail-item">
				<span class="detail-label">Ammount Due:</span>
				<span id="detail-min-amount" class="detail-value">-</span>
			</div>
			<div class="detail-item">
				<span class="detail-label">Timestamp:</span>
				<span id="detail-timestamp" class="detail-value">-</span>
			</div>
			<div class="detail-item">
				<span class="detail-label">Status:</span>
				<span id="detail-status" class="detail-value">-</span>
			</div>
		</div>
	</div>
</div>

<style>
	.withdraw-request-container {
		margin: 2rem 0;
		padding: 1.5rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		border-radius: 8px;
	}

	.withdraw-request-description {
		color: rgb(var(--accent-light));
		font-size: 0.9rem;
		margin-bottom: 1rem;
		opacity: 0.8;
	}

	.withdraw-request-form {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.withdraw-request-form label {
		color: rgb(var(--accent-light));
		font-weight: bold;
	}

	.withdraw-request-form input {
		padding: 0.75rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		border-radius: 4px;
		background: rgba(var(--accent-dark), 50%);
		color: white;
		font-size: 1rem;
	}

	.withdraw-request-form input:focus {
		outline: none;
		border-color: rgb(var(--accent-light));
	}

	.withdraw-request-form button {
		padding: 0.75rem 1.5rem;
		background: linear-gradient(45deg, #4ecdc4, #44a08d);
		border: none;
		border-radius: 4px;
		color: white;
		font-weight: bold;
		cursor: pointer;
		transition: opacity 0.2s;
	}

	.withdraw-request-form button:hover:not(:disabled) {
		opacity: 0.8;
	}

	.withdraw-request-form button:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.status-message {
		padding: 0.5rem;
		border-radius: 4px;
		font-weight: bold;
		text-align: center;
	}

	.status-message.success {
		background: rgba(0, 255, 0, 0.2);
		color: #00ff00;
		border: 1px solid #00ff00;
	}

	.status-message.error {
		background: rgba(255, 0, 0, 0.2);
		color: #ff0000;
		border: 1px solid #ff0000;
	}

	.status-message.info {
		background: rgba(0, 150, 255, 0.2);
		color: #0096ff;
		border: 1px solid #0096ff;
	}

	.request-details {
		margin-top: 1.5rem;
		padding: 1rem;
		border: 1px solid rgba(var(--accent-light), 15%);
		background: rgba(var(--accent-dark), 25%);
		border-radius: 6px;
	}

	.request-details h4 {
		color: rgb(var(--accent-light));
		margin: 0 0 1rem 0;
		font-size: 1.1rem;
	}

	.detail-grid {
		display: grid;
		grid-template-columns: 1fr;
		gap: 0.75rem;
	}

	.detail-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0;
		border-bottom: 1px solid rgba(var(--accent-light), 10%);
	}

	.detail-item:last-child {
		border-bottom: none;
	}

	.detail-label {
		color: rgb(var(--accent-light));
		font-weight: 500;
		opacity: 0.8;
	}

	.detail-value {
		color: white;
		font-weight: bold;
		text-align: right;
	}

	@media (min-width: 768px) {
		.detail-grid {
			grid-template-columns: 1fr 1fr;
			gap: 1rem;
		}
	}
</style>

<script>
	import { getPublicKey, signTransaction } from "../stellar-wallets-kit";
	import stoken from "../contracts/stoken";

	const requestIdInput = document.getElementById('request-id') as HTMLInputElement;
	const fetchButton = document.getElementById('fetch-request-button') as HTMLButtonElement;
	const statusMessage = document.getElementById('withdraw-request-status') as HTMLElement;
	const requestDetails = document.getElementById('request-details') as HTMLElement;

	// Detail elements
	const detailRequestId = document.getElementById('detail-request-id') as HTMLElement;
	const detailShares = document.getElementById('detail-shares') as HTMLElement;
	const detailMinAmount = document.getElementById('detail-min-amount') as HTMLElement;
	const detailTimestamp = document.getElementById('detail-timestamp') as HTMLElement;
	const detailStatus = document.getElementById('detail-status') as HTMLElement;

	function showStatus(message: string, type: 'success' | 'error' | 'info' = 'info') {
		statusMessage.textContent = message;
		statusMessage.className = `status-message ${type}`;
	}

	function clearStatus() {
		statusMessage.textContent = '';
		statusMessage.className = 'status-message';
	}

	function hideRequestDetails() {
		requestDetails.style.display = 'none';
	}

	function showRequestDetails() {
		requestDetails.style.display = 'block';
	}

	function formatNumber(value: bigint, decimals: number = 7): string {
		const divisor = BigInt(10 ** decimals);
		const whole = value / divisor;
		const remainder = value % divisor;
		
		if (remainder === 0n) {
			return whole.toString();
		}
		
		const remainderStr = remainder.toString().padStart(decimals, '0');
		const trimmedRemainder = remainderStr.replace(/0+$/, '');
		
		if (trimmedRemainder === '') {
			return whole.toString();
		}
		
		return `${whole}.${trimmedRemainder}`;
	}

	function formatTimestamp(timestamp: bigint): string {
		// Convert from seconds to milliseconds and create a Date object
		const date = new Date(Number(timestamp) * 1000);
		return date.toLocaleString();
	}

	function determineStatus(requestData: readonly [bigint, bigint, bigint, bigint]): string {
		// Based on the contract structure, we'll assume:
		// [0] = shares requested
		// [1] = amount due
		// [2] = min amount out
		// [3] = fee shares
		
		const status = requestData[3];
		
		switch (Number(status)) {
			case 0:
				return 'Pending';
			case 1:
				return 'Fulfilled';
			case 2:
				return 'Cancelled';
			default:
				return `Unknown (${status})`;
		}
	}

	async function checkWalletConnection() {
		const publicKey = await getPublicKey();
		const requestId = requestIdInput.value.trim();
		
		fetchButton.disabled = !publicKey || !requestId || isNaN(Number(requestId)) || Number(requestId) < 0;
	}

	requestIdInput.addEventListener('input', checkWalletConnection);

	fetchButton.addEventListener('click', async () => {
		const publicKey = await getPublicKey();
		if (!publicKey) {
			showStatus('Please connect your wallet first', 'error');
			return;
		} else {
			stoken.options.publicKey = publicKey;
			stoken.options.signTransaction = signTransaction;
		}

		const requestId = requestIdInput.value.trim();
		if (!requestId || isNaN(Number(requestId)) || Number(requestId) < 0) {
			showStatus('Please enter a valid request ID', 'error');
			return;
		}

		try {
			showStatus('Fetching request details...', 'info');
			fetchButton.disabled = true;
			hideRequestDetails();

			// Call the get_withdraw_request function on the stoken contract
			const tx = await stoken.get_withdraw_request({
				request_id: BigInt(requestId)
			});

			// For read-only operations, we can use simulate() instead of signAndSend()
			const simulation = await tx.simulate();
			const result = simulation.result;

            console.log(result);
            console.log("shares: ", result[0]);
            console.log("amount due: ", result[1]);
            console.log("min_amount_out: ", result[2]);
            console.log("fee shares: ", result[3]);
			
			if (result && result.length === 4) {
				// Display the request details
				detailRequestId.textContent = requestId;
				detailShares.textContent = formatNumber(result[0]) + ' shares';
				detailMinAmount.textContent = formatNumber(result[1]) + ' tokens';
				detailTimestamp.textContent = formatTimestamp(result[2]);
				detailStatus.textContent = determineStatus(result);
				
				showRequestDetails();
				showStatus('Request details loaded successfully!', 'success');
			} else {
				showStatus('Invalid response from contract', 'error');
			}
			
		} catch (error) {
			console.error('Fetch request error:', error);
			const errorMessage = error instanceof Error ? error.message : 'Unknown error';
			
			// Check if it's a "not found" type error
			if (errorMessage.includes('not found') || errorMessage.includes('does not exist')) {
				showStatus('Request ID not found', 'error');
			} else {
				showStatus(`Failed to fetch request: ${errorMessage}`, 'error');
			}
			
			hideRequestDetails();
		} finally {
			fetchButton.disabled = false;
			checkWalletConnection();
		}
	});

	// Check wallet connection on load
	checkWalletConnection();

	// Listen for wallet connection changes
	window.addEventListener('walletConnected', checkWalletConnection);
	window.addEventListener('walletDisconnected', () => {
		fetchButton.disabled = true;
		clearStatus();
		hideRequestDetails();
	});
</script>
