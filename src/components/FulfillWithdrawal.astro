<div class="fulfill-withdrawal-container">
	<h3>Fulfill Withdrawal</h3>
	<div class="fulfill-withdrawal-form">
		<label for="user-address">User Address:</label>
		<input type="text" id="user-address" placeholder="Enter user address" />
		<label for="request-id">Request ID:</label>
		<input type="number" id="request-id" placeholder="Enter request ID" min="0" step="1" />
		<button id="fulfill-button" disabled>Fulfill Withdrawal</button>
	</div>
	<div id="fulfill-status" class="status-message"></div>
</div>

<style>
	.fulfill-withdrawal-container {
		margin: 2rem 0;
		padding: 1.5rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		border-radius: 8px;
	}

	.fulfill-withdrawal-form {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.fulfill-withdrawal-form label {
		color: rgb(var(--accent-light));
		font-weight: bold;
	}

	.fulfill-withdrawal-form input {
		padding: 0.75rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		border-radius: 4px;
		background: rgba(var(--accent-dark), 50%);
		color: white;
		font-size: 1rem;
	}

	.fulfill-withdrawal-form input:focus {
		outline: none;
		border-color: rgb(var(--accent-light));
	}

	.fulfill-withdrawal-form button {
		padding: 0.75rem 1.5rem;
		background: linear-gradient(45deg, rgb(var(--accent-light)), rgb(var(--accent-dark)));
		border: none;
		border-radius: 4px;
		color: white;
		font-weight: bold;
		cursor: pointer;
		transition: opacity 0.2s;
	}

	.fulfill-withdrawal-form button:hover:not(:disabled) {
		opacity: 0.8;
	}

	.fulfill-withdrawal-form button:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.status-message {
		padding: 0.5rem;
		border-radius: 4px;
		font-weight: bold;
		text-align: center;
	}

	.status-message.success {
		background: rgba(0, 255, 0, 0.2);
		color: #00ff00;
		border: 1px solid #00ff00;
	}

	.status-message.error {
		background: rgba(255, 0, 0, 0.2);
		color: #ff0000;
		border: 1px solid #ff0000;
	}

	.status-message.info {
		background: rgba(0, 150, 255, 0.2);
		color: #0096ff;
		border: 1px solid #0096ff;
	}
</style>

<script>
	import { getPublicKey, signTransaction } from "../stellar-wallets-kit";
	import stoken from "../contracts/stoken";

	const userAddressInput = document.getElementById('user-address') as HTMLInputElement;
	const requestIdInput = document.getElementById('request-id') as HTMLInputElement;
	const fulfillButton = document.getElementById('fulfill-button') as HTMLButtonElement;
	const statusMessage = document.getElementById('fulfill-status') as HTMLElement;

	function showStatus(message: string, type: 'success' | 'error' | 'info' = 'info') {
		statusMessage.textContent = message;
		statusMessage.className = `status-message ${type}`;
	}

	function clearStatus() {
		statusMessage.textContent = '';
		statusMessage.className = 'status-message';
	}

	async function checkWalletConnection() {
		const publicKey = await getPublicKey();
		const hasValidInputs = userAddressInput.value.trim() && requestIdInput.value && parseInt(requestIdInput.value) >= 0;
		fulfillButton.disabled = !publicKey || !hasValidInputs;
	}

	userAddressInput.addEventListener('input', checkWalletConnection);
	requestIdInput.addEventListener('input', checkWalletConnection);

	fulfillButton.addEventListener('click', async () => {
		const publicKey = await getPublicKey();
		if (!publicKey) {
			showStatus('Please connect your wallet first', 'error');
			return;
		} else {
            stoken.options.publicKey = publicKey;
            stoken.options.signTransaction = signTransaction;
        }

		const userAddress = userAddressInput.value.trim();
		const requestId = parseInt(requestIdInput.value);

		if (!userAddress) {
			showStatus('Please enter a valid user address', 'error');
			return;
		}

		if (isNaN(requestId) || requestId < 0) {
			showStatus('Please enter a valid request ID', 'error');
			return;
		}

		try {
			showStatus('Fulfilling withdrawal...', 'info');
			fulfillButton.disabled = true;

			// Call the fulfill_withdrawal function on the stoken contract
			const tx = await stoken.fulfill_withdrawal({
				user: userAddress,
				request_id: BigInt(requestId)
			});

			await tx.signAndSend();

			showStatus('Withdrawal fulfilled successfully!', 'success');
			userAddressInput.value = '';
			requestIdInput.value = '';
			
			// Trigger balance update
			window.dispatchEvent(new CustomEvent('walletConnected'));
			
		} catch (error) {
			console.error('Fulfill withdrawal error:', error);
			const errorMessage = error instanceof Error ? error.message : 'Unknown error';
			showStatus(`Fulfill withdrawal failed: ${errorMessage}`, 'error');
		} finally {
			fulfillButton.disabled = false;
			checkWalletConnection();
		}
	});

	// Check wallet connection on load
	checkWalletConnection();

	// Listen for wallet connection changes
	window.addEventListener('walletConnected', checkWalletConnection);
	window.addEventListener('walletDisconnected', () => {
		fulfillButton.disabled = true;
		clearStatus();
	});
</script>
