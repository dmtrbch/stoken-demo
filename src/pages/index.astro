---
import Layout from "../layouts/Layout.astro";
import ConnectWallet from "../components/ConnectWallet.astro";
import Deposit from "../components/Deposit.astro";
import Mint from "../components/Mint.astro";
import Withdraw from "../components/Withdraw.astro";
import WithdrawRequest from "../components/WithdrawRequest.astro";
import ProcessDeposit from "../components/ProcessDeposit.astro";
import FulfillWithdrawal from "../components/FulfillWithdrawal.astro";
import stoken from "../contracts/stoken";
import asset from "../contracts/asset";

// Format function to convert raw amounts to display format
function formatAmount(rawAmount: string | number | bigint | undefined): string {
	if (!rawAmount) return '0';
	const amount = typeof rawAmount === 'bigint' ? Number(rawAmount) : 
		typeof rawAmount === 'string' ? parseFloat(rawAmount) : rawAmount;
	return (amount / 10000000).toFixed(7).replace(/\.?0+$/, '');
}

const { result: assetSymbol } = await asset.symbol();
const { result: symbol } = await stoken.symbol();
const { result: currentPrice } = await stoken.price();
const { result: isPaused } = await stoken.is_paused();
---

<script is:inline>var global = global || window;</script>
<Layout title="SToken">
	<main>
		<svg
			class="astro-a"
			width="495"
			height="623"
			viewBox="0 0 495 623"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
		>
			<path
				fill-rule="evenodd"
				clip-rule="evenodd"
				d="M167.19 364.254C83.4786 364.254 0 404.819 0 404.819C0 404.819 141.781 19.4876 142.087 18.7291C146.434 7.33701 153.027 0 162.289 0H332.441C341.703 0 348.574 7.33701 352.643 18.7291C352.92 19.5022 494.716 404.819 494.716 404.819C494.716 404.819 426.67 364.254 327.525 364.254L264.41 169.408C262.047 159.985 255.147 153.581 247.358 153.581C239.569 153.581 232.669 159.985 230.306 169.408L167.19 364.254ZM160.869 530.172C160.877 530.18 160.885 530.187 160.894 530.195L160.867 530.181C160.868 530.178 160.868 530.175 160.869 530.172ZM136.218 411.348C124.476 450.467 132.698 504.458 160.869 530.172C160.997 529.696 161.125 529.242 161.248 528.804C161.502 527.907 161.737 527.073 161.917 526.233C165.446 509.895 178.754 499.52 195.577 500.01C211.969 500.487 220.67 508.765 223.202 527.254C224.141 534.12 224.23 541.131 224.319 548.105C224.328 548.834 224.337 549.563 224.347 550.291C224.563 566.098 228.657 580.707 237.264 593.914C245.413 606.426 256.108 615.943 270.749 622.478C270.593 621.952 270.463 621.508 270.35 621.126C270.045 620.086 269.872 619.499 269.685 618.911C258.909 585.935 266.668 563.266 295.344 543.933C298.254 541.971 301.187 540.041 304.12 538.112C310.591 533.854 317.059 529.599 323.279 525.007C345.88 508.329 360.09 486.327 363.431 457.844C364.805 446.148 363.781 434.657 359.848 423.275C358.176 424.287 356.587 425.295 355.042 426.275C351.744 428.366 348.647 430.33 345.382 431.934C303.466 452.507 259.152 455.053 214.03 448.245C184.802 443.834 156.584 436.019 136.218 411.348Z"
				fill="url(#paint0_linear_1805_24383)"></path>
			<defs>
				<linearGradient
					id="paint0_linear_1805_24383"
					x1="247.358"
					y1="0"
					x2="247.358"
					y2="622.479"
					gradientUnits="userSpaceOnUse"
				>
					<stop stop-opacity="0.9"></stop>
					<stop offset="1" stop-opacity="0.2"></stop>
				</linearGradient>
			</defs>
		</svg>
		<h1>S Token</h1>
		<ConnectWallet />
		<Mint />
		<Deposit />
		<Withdraw />
		<WithdrawRequest />
		<div id="process-deposit-container" style="display: none;">
			<ProcessDeposit />
		</div>
		<div id="fulfill-withdrawal-container" style="display: none;">
			<FulfillWithdrawal />
		</div>
		<p class="instructions">
			Total Shares: <span id="total-shares">Loading...</span><br />
			Total Assets in Vault: <span id="total-assets-in-vault">Loading...</span><br />
			Price Per Share: {formatAmount(currentPrice)}<br />
			Your {symbol} Balance: <span id="user-stoken-balance">Loading...</span><br />
			Your {assetSymbol} Balance: <span id="user-asset-balance">Loading...</span><br />
			Asset Manager {symbol} Balance: <span id="asset-manager-stoken-balance">Loading...</span><br />
			Asset Manager {assetSymbol} Balance: <span id="asset-manager-asset-balance">Loading...</span><br />
			Vault Status: {isPaused ? 'Paused' : 'Active'}<br /> 
		</p>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>

<script>
	import { getPublicKey } from "../stellar-wallets-kit";
	import stoken from "../contracts/stoken";
	import asset from "../contracts/asset";

	// Format function to convert raw amounts to display format
	function formatAmount(rawAmount: any) {
		if (!rawAmount) return '0';
		const amount = typeof rawAmount === 'bigint' ? Number(rawAmount) : 
			typeof rawAmount === 'string' ? parseFloat(rawAmount) : rawAmount;
		return (amount / 10000000).toFixed(7).replace(/\.?0+$/, '');
	}

	async function updateUserBalances() {
		const publicKey = await getPublicKey();
		
		if (!publicKey) {
			const totalSharesElement = document.getElementById('total-shares');
			const totalAssetsInVaultElement = document.getElementById('total-assets-in-vault');
			const stokenElement = document.getElementById('user-stoken-balance');
			const assetElement = document.getElementById('user-asset-balance');
			const assetManagerStokenElement = document.getElementById('asset-manager-stoken-balance');
			const assetManagerAssetElement = document.getElementById('asset-manager-asset-balance');
			const processDepositContainer = document.getElementById('process-deposit-container');
			const fulfillWithdrawalContainer = document.getElementById('fulfill-withdrawal-container');
			if (totalSharesElement) totalSharesElement.textContent = 'Loading...';
			if (totalAssetsInVaultElement) totalAssetsInVaultElement.textContent = 'Loading...';
			if (stokenElement) stokenElement.textContent = 'Not connected';
			if (assetElement) assetElement.textContent = 'Not connected';
			if (assetManagerStokenElement) assetManagerStokenElement.textContent = 'Loading...';
			if (assetManagerAssetElement) assetManagerAssetElement.textContent = 'Loading...';
			if (processDepositContainer) processDepositContainer.style.display = 'none';
			if (fulfillWithdrawalContainer) fulfillWithdrawalContainer.style.display = 'none';
			return;
		}

		// Check if the connected wallet is the authorized processor
		const authorizedProcessor = 'GBKI6GEUE5D4DKLXXXFZ53KDJ6JYWPHPRM56VJNRAZPWQY7EDQTKRYCL';
		const processDepositContainer = document.getElementById('process-deposit-container');
		const fulfillWithdrawalContainer = document.getElementById('fulfill-withdrawal-container');
		
		if (publicKey === authorizedProcessor) {
			if (processDepositContainer) processDepositContainer.style.display = 'block';
			if (fulfillWithdrawalContainer) fulfillWithdrawalContainer.style.display = 'block';
		} else {
			if (processDepositContainer) processDepositContainer.style.display = 'none';
			if (fulfillWithdrawalContainer) fulfillWithdrawalContainer.style.display = 'none';
		}

		try {
			// Get user's SToken balance
			const { result: stokenBalance } = await stoken.balance({ account: publicKey });
			const stokenElement = document.getElementById('user-stoken-balance');
			if (stokenElement) {
				stokenElement.textContent = formatAmount(stokenBalance);
			}

			// Get total shares
			const { result: totalShares } = await stoken.total_shares();
			const totalSharesElement = document.getElementById('total-shares');
			if (totalSharesElement) {
				totalSharesElement.textContent = formatAmount(totalShares);
			}

			// Get total assets in vault
			const { result: totalAssets } = await stoken.total_assets();
			const totalAssetsInVaultElement = document.getElementById('total-assets-in-vault');
			if (totalAssetsInVaultElement) {
				totalAssetsInVaultElement.textContent = formatAmount(totalAssets);
			}

			// Get user's asset balance
			const { result: assetBalance } = await asset.balance({ account: publicKey });
			const assetElement = document.getElementById('user-asset-balance');
			if (assetElement) {
				assetElement.textContent = formatAmount(assetBalance);
			}

			// Get asset manager address
			const { result: assetManagerAddress } = await stoken.asset_manager();
			
			// Get asset manager's SToken balance
			const { result: assetManagerStokenBalance } = await stoken.balance({ account: assetManagerAddress });
			const assetManagerStokenElement = document.getElementById('asset-manager-stoken-balance');
			if (assetManagerStokenElement) {
				assetManagerStokenElement.textContent = formatAmount(assetManagerStokenBalance);
			}

			// Get asset manager's asset balance
			const { result: assetManagerAssetBalance } = await asset.balance({ account: assetManagerAddress });
			const assetManagerAssetElement = document.getElementById('asset-manager-asset-balance');
			if (assetManagerAssetElement) {
				assetManagerAssetElement.textContent = formatAmount(assetManagerAssetBalance);
			}
		} catch (error) {
			console.error('Error fetching balances:', error);
			const totalSharesElement = document.getElementById('total-shares');
			const totalAssetsInVaultElement = document.getElementById('total-assets-in-vault');
			const stokenElement = document.getElementById('user-stoken-balance');
			const assetElement = document.getElementById('user-asset-balance');
			const assetManagerStokenElement = document.getElementById('asset-manager-stoken-balance');
			const assetManagerAssetElement = document.getElementById('asset-manager-asset-balance');
			if (totalSharesElement) totalSharesElement.textContent = 'Error';
			if (totalAssetsInVaultElement) totalAssetsInVaultElement.textContent = 'Error';
			if (stokenElement) stokenElement.textContent = 'Error';
			if (assetElement) assetElement.textContent = 'Error';
			if (assetManagerStokenElement) assetManagerStokenElement.textContent = 'Error';
			if (assetManagerAssetElement) assetManagerAssetElement.textContent = 'Error';
		}
	}

	// Update balances when page loads
	updateUserBalances();

	// Listen for wallet connection changes
	window.addEventListener('walletConnected', updateUserBalances);
	window.addEventListener('walletDisconnected', () => {
		const totalSharesElement = document.getElementById('total-shares');
		const totalAssetsInVaultElement = document.getElementById('total-assets-in-vault');
		const stokenElement = document.getElementById('user-stoken-balance');
		const assetElement = document.getElementById('user-asset-balance');
		const assetManagerStokenElement = document.getElementById('asset-manager-stoken-balance');
		const assetManagerAssetElement = document.getElementById('asset-manager-asset-balance');
		const currentPriceElement = document.getElementById('current-price');
		if (totalSharesElement) totalSharesElement.textContent = 'Loading...';
		if (totalAssetsInVaultElement) totalAssetsInVaultElement.textContent = 'Loading...';
		if (stokenElement) stokenElement.textContent = 'Not connected';
		if (assetElement) assetElement.textContent = 'Not connected';
		if (assetManagerStokenElement) assetManagerStokenElement.textContent = 'Loading...';
		if (assetManagerAssetElement) assetManagerAssetElement.textContent = 'Loading...';
		if (currentPriceElement) currentPriceElement.textContent = 'Loading...';
	});
</script>
